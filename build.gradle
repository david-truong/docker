def executeOnShell(String command) {
	return executeOnShell(command, true)
}

def executeOnShell(String command, boolean showOutput) {
	return executeOnShell(command, new File(System.properties.'user.dir'), showOutput)
}

def executeOnShell(String command, File workingDir, boolean showOutput) {
	println command
	def process = new ProcessBuilder(addShellPrefix(command))
			.directory(workingDir)
			.redirectErrorStream(true)
			.start()
	if(showOutput) {
		process.inputStream.eachLine {println it}
	}
	process.waitFor();
	return process.exitValue()
}

def addShellPrefix(String command) {
	def commandArray = new String[3]
	commandArray[0] = "sh"
	commandArray[1] = "-c"
	commandArray[2] = command
	return commandArray
}

allprojects {
	task cleanImages (description: "delete all untagged images") << {
		executeOnShell('docker images -q --filter "dangling=true" | xargs docker rmi')
	}
}

subprojects {
	ext {
		liferayCommit = '29bd13e'
		imageName = 'liferay/' + name
		containerName = name
		bundle = false
		containerId = ''
		appserver = ''
		version = ''
		cmd = ''
		files = []
		distCommand = "${appserver}"
	}

	afterEvaluate { project ->
		if (name.startsWith("bundle-")) {
			task createTemplate(dependsOn: ['copyTemplateFiles'], description: 'build bundle template') << {

			}

			task copyTemplateFiles(type: Copy, description: 'copy template files') << {
				from '../bundleTemplate/*'
				into projectDir
			}
		}
		if (new File(project.projectDir, 'Dockerfile').exists()) {
			task buildImage(dependsOn: [':file-server:jettyRun'], description: 'build Docker image') << {
				executeOnShell("docker build --tag=${project.imageName} .")
			}

			if (project.bundle) {
				task start(description: 'start Docker container') << {
					def exitValue = executeOnShell("docker start ${project.containerName}", false)

					if (exitValue != 0) {
						println "Container ${project.containerName} does not exist! Creating it now..."
						exitValue = executeOnShell("docker run -d --name=${project.containerName} --publish=8080:8080 ${project.imageName}", false)
					}

					if (exitValue != 0) {
						println "Failed to start ${project.containerName}"
					}
					else {
						println "Starting ${project.containerName}"
					}
				}

				task stop(description: 'stop Docker container') << {
					executeOnShell("docker stop ${project.containerName}")
				}

				task remove(description: 'remove the Docker container') << {
					executeOnShell("docker rm -fv ${project.containerName}")
				}
			}
		}
		if (new File(project.projectDir, 'docker-compose.yml').exists()) {
			task start(description: 'start an existing Docker container') << {
				"docker-compose up".execute()
			}

			task stop(description: 'start an existing Docker container') << {
				executeOnShell("docker-compose stop")
			}

			task remove(dependsOn: ['stop'], description: 'start an existing Docker container') << {
				executeOnShell("docker-compose rm -fv")
			}
		}
	}
}

