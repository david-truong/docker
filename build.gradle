def executeOnShell(String command) {
	return executeOnShell(command, new File(System.properties.'user.dir'))
}

def executeOnShell(String command, File workingDir) {
	println command
	def process = new ProcessBuilder(addShellPrefix(command))
			.directory(workingDir)
			.redirectErrorStream(true)
			.start()
	process.inputStream.eachLine {println it}
	process.waitFor();
	return process.exitValue()
}

def addShellPrefix(String command) {
	def commandArray = new String[3]
	commandArray[0] = "sh"
	commandArray[1] = "-c"
	commandArray[2] = command
	return commandArray
}

allprojects {
	task cleanImages (description: "delete all untagged images") << {
		def p = 'docker images -q --filter "dangling=true" | xargs docker rmi'.execute()

		p.in.eachLine { line ->
			println line
		}
	}
}

subprojects {
	ext {
		imageName = 'liferay/' + name
		containerName = name
		bundle = false
		containerId = ''
	}

	afterEvaluate { project ->
		if (name.startsWith("bundle-")) {
			task createTemplate(description: 'build bundle template') << {

			}
		}
		if (new File(project.projectDir, 'Dockerfile').exists()) {
			task buildImage(dependsOn: [':file-server:jettyRun'], description: 'build Docker image') << {
				executeOnShell("docker build --tag=${project.imageName} .")
			}

			if (project.bundle) {
				task start(description: 'start Docker container') << {
					try {
						def p = "docker start ${project.containerName}".execute()

						p.exitValue()
					}
					catch (Exception e) {
						def p = "docker run -d --name=${project.containerName} --publish=8080:8080 ${project.imageName}".execute()

						try {
							p.exitValue()

							println p.err.text
						}
						catch(Exception ne) {
							println "Starting ${project.containerName}"
						}
					}
				}

				task stop(description: 'stop Docker container') << {
					"docker stop ${project.containerName}".execute()
				}

				task remove(description: 'remove the Docker container') << {
					"docker rm -fv ${project.containerName}".execute()
				}
			}
		}
		if (new File(project.projectDir, 'docker-compose.yml').exists()) {
			task start(description: 'start an existing Docker container') << {
				"docker-compose up".execute()
			}

			task stop(description: 'start an existing Docker container') << {
				def process ="docker-compose stop".execute()
				println "${process.text}"
			}

			task remove(description: 'start an existing Docker container') {
				dependsOn stop

				doLast {
					def process ="docker-compose rm -fv".execute()
					println "${process.text}"
				}
			}
		}
	}
}

