task getDBContainers(type: Exec, description: 'get the db containers') {
	executable 'docker'
	args 'ps'
	args '-aq'
	args '--filter="name=database-"'

	standardOutput = new ByteArrayOutputStream()

	ext.containers = standardOutput.toString().split('\n')
}

subprojects {
	ext {
		imageName = 'liferay/' + name
		containerName = name
		bundle = false
		containerId = ''
	}

	afterEvaluate { project ->
		if (new File(project.projectDir, 'Dockerfile').exists()) {
			task buildImage(description: 'build Docker image') << {
				def p = "docker build --tag=${project.imageName} .".execute()

				p.in.eachLine { line ->
					println line
				}
			}

			if (project.bundle) {
				task start(description: 'start Docker container') {
					dependsOn buildImage

					doLast {
						try {
							def p = "docker start ${project.containerName}".execute()

							p.exitValue()
						}
						catch (Exception e) {
							"docker run -d --name=${project.containerName} --publish=8080:8080 ${project.imageName}".execute()
						}
					}
				}

				task stop(description: 'stop Docker container') << {
					"docker stop ${project.containerName}".execute()
				}

				task remove(description: 'remove the Docker container') << {
					"docker rm -fv ${project.containerName}".execute()
				}
			}
		}
		if (new File(project.projectDir, 'docker-compose.yml').exists()) {
			task start(description: 'start an existing Docker container') << {
				"docker-compose up".execute()
			}

			task stop(description: 'start an existing Docker container') << {
				def process ="docker-compose stop".execute()
				println "${process.text}"
			}

			task remove(description: 'start an existing Docker container') {
				dependsOn stop

				doLast {
					def process ="docker-compose rm -fv".execute()
					println "${process.text}"
				}
			}
		}
	}
}

