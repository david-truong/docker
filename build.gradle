import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerTagImage

ext {
	imagePrefix = 'liferay'
}

allprojects {
	apply plugin: 'idea'
}

buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath 'com.bmuschko:gradle-docker-plugin:2.6.1'
	}
}

subprojects {
	apply plugin: 'com.bmuschko.docker-remote-api'

	repositories {
		mavenLocal()
		mavenCentral()
	}

	ext {
		imageName = imagePrefix + '/' + name
	}

	afterEvaluate { project ->
		if (new File(project.projectDir, 'Dockerfile').exists()) {
			if (!project.hasProperty('imageName')) {
				throw new GradleException('Root directory of ' + project.name
						+ ' contains Dockerfile, but it does not define project.ext.imageName value')
			}
			docker.url = 'unix:///var/run/docker.sock'
			if (!System.properties['os.name'].equals('Mac OS X')) {
				docker.certPath = null
			}
			if (System.env.DOCKER_HOST) {
				docker.url = "$System.env.DOCKER_HOST".replace("tcp", "https")
				if (System.env.DOCKER_CERT_PATH) {
					docker.certPath = new File(System.env.DOCKER_CERT_PATH)
				}
			}

			task buildDockerImage(type: DockerBuildImage, dependsOn: [taskCopyFilesForDocker], description: 'build Docker image') {
				inputDir = file(project.projectDir)
				tag = project.imageName
			}
		}
	}
}

