task getDBContainers(type: Exec, description: 'get the db containers') {
	executable 'docker'
	args 'ps'
	args '-aq'
	args '--filter="name=database-"'

	standardOutput = new ByteArrayOutputStream()

	ext.containers = standardOutput.toString().split('\n')
}

subprojects {
	ext {
		imageName = 'liferay/' + name
		containerName = name
		bundle = false
		containerId = ''
	}

	afterEvaluate { project ->
		if (new File(project.projectDir, 'Dockerfile').exists()) {
			task buildImage(type: Exec, description: 'build Docker image') {
				executable 'docker'
				args 'build'
				args '--tag=' + project.imageName
				args '.'
			}

			if (project.bundle) {
				task create(type: Exec, description: 'create Docker container') {
					dependsOn buildImage

					executable 'docker'
					args 'run'
					args '-d'
					args '--name=' + project.containerName
					args '--publish=8080:8080'
					args project.imageName
				}

				task start(type: Exec, description: 'start an existing Docker container') {
					executable 'docker'
					args 'start'
					args project.containerName
				}

				task stop(type: Exec, description: 'stop Docker container') {
					executable 'docker'
					args 'stop'
					args project.containerName
				}

				task remove(type: Exec, description: 'remove the Docker container') {
					executable 'docker'
					args 'rm'
					args project.containerName
				}
			}
		}
		if (new File(project.projectDir, 'docker-compose.yml').exists()) {
			task start(type: Exec, description: 'start an existing Docker container') {
				executable 'docker-compose'
				args 'up'
			}

			task rm(type: Exec, description: 'delete existing Docker container') {
				executable 'docker-compose'
				args 'rm'
			}
		}
	}
}

