subprojects {
	ext {
		appserver = name
		cmd = ''
		containerName = name
		distCommand = "${appserver}"
		imageName = 'liferay/' + name
		liferayCommit = '29bd13e'
		version = ''
		files = []
	}

	afterEvaluate { project ->
		task createTemplate(dependsOn: ['copyTemplateFiles'], description: 'build bundle template') << {

		}

		task copyTemplateFiles(type: Copy, description: 'copy template files') << {
			from '../bundleTemplate/*'
			into projectDir
		}
		if (new File(project.projectDir, 'Dockerfile').exists()) {
			task buildImage(dependsOn: [':file-server:jettyRun'], description: 'build Docker image') << {
				executeOnShell("docker build --tag=${project.imageName} ${project.projectDir}")
			}

			task start(description: 'start Docker container') << {
				def exitValue = executeOnShell("docker start ${project.containerName}", false)

				if (exitValue != 0) {
					println "Container ${project.containerName} does not exist! Creating it now..."
					exitValue = executeOnShell("docker run -d --name=${project.containerName} --publish=8080:8080 ${project.imageName}", false)
				}

				if (exitValue != 0) {
					println "Failed to start ${project.containerName}"
				}
				else {
					println "Starting ${project.containerName}"
				}
			}

			task stop(description: 'stop Docker container') << {
				executeOnShell("docker stop ${project.containerName}")
			}

			task remove(description: 'remove the Docker container') << {
				executeOnShell("docker rm -fv ${project.containerName}")
			}
		}
	}
}

